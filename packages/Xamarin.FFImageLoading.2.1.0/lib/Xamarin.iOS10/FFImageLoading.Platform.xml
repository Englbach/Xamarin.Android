<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading.Platform</name>
    </assembly>
    <members>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.UsesSameNativeControl(FFImageLoading.Work.IImageLoaderTask)">
             <summary>
             Indicates if the task uses the same native control
             </summary>
             <returns><c>true</c>, if same native control is used, <c>false</c> otherwise.</returns>
             <param name="task">Task to check.</param>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.PrepareAndTryLoadingFromCacheAsync">
             <summary>
             Prepares the instance before it runs.
             </summary>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.TryGeneratingImageAsync">
             <summary>
             Runs the image loading task: gets image from file, url, asset or cache. Then assign it to the imageView.
             </summary>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.TryLoadingFromCacheAsync">
             <summary>
             Tries to load requested image from the cache asynchronously.
             </summary>
             <returns>A boolean indicating if image was loaded from cache.</returns>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.LoadFromStreamAsync(System.IO.Stream)">
             <summary>
             Loads the image from given stream asynchronously.
             </summary>
             <returns>An awaitable task.</returns>
             <param name="stream">The stream to get data from.</param>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.LoadPlaceHolderAsync(System.String,FFImageLoading.Work.ImageSource,System.Boolean)">
             <summary>
             Loads given placeHolder into the imageView.
             </summary>
             <returns>An awaitable task.</returns>
             <param name="placeholderPath">Full path to the placeholder.</param>
             <param name="source">Source for the path: local, web, assets</param>
            </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Into(FFImageLoading.Work.TaskParameter,UIKit.UIImageView,System.Single)">
             <summary>
             Loads the image into given imageView using defined parameters.
             </summary>
             <param name="parameters">Parameters for loading the image.</param>
             <param name="imageView">Image view that should receive the image.</param>
             <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
            </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Into(FFImageLoading.Work.TaskParameter,UIKit.UIButton,System.Single)">
             <summary>
             Loads the image into given UIButton using defined parameters.
             </summary>
             <param name="parameters">Parameters for loading the image.</param>
             <param name="button">UIButton that should receive the image.</param>
             <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
            </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,UIKit.UIImageView,System.Single)">
             <summary>
             Only use this method if you plan to handle exceptions in your code. Awaiting this method will give you this flexibility.
             </summary>
             <returns>An awaitable Task.</returns>
             <param name="parameters">Parameters for loading the image.</param>
             <param name="imageView">Image view that should receive the image.</param>
             <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
            </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,UIKit.UIButton,System.Single)">
             <summary>
             Only use this method if you plan to handle exceptions in your code. Awaiting this method will give you this flexibility.
             </summary>
             <returns>An awaitable Task.</returns>
             <param name="parameters">Parameters for loading the image.</param>
             <param name="button">UIButton that should receive the image.</param>
             <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
            </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.InvalidateAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Cache.CacheType)">
             <summary>
             Invalidate the image corresponding to given parameters from given caches.
             </summary>
             <param name="parameters">Image parameters.</param>
             <param name="cacheType">Cache type.</param>
            </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Preload(FFImageLoading.Work.TaskParameter)">
             <summary>
             Preload the image request into memory cache/disk cache for future use.
             </summary>
             <param name="parameters">Image parameters.</param>
            </member>
        <member name="T:FFImageLoading.Cache.ImageCacheHelper">
             <summary>
             Image cache Helper
             </summary>
            </member>
        <member name="M:FFImageLoading.Cache.ImageCacheHelper.Invalidate">
             <summary>
             
             </summary>
            </member>
        <member name="T:FFImageLoading.Cache.DiskCache">
             <summary>
             Disk cache iOS/Android implementation.
             </summary>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FFImageLoading.Cache.DiskCache" /> class.
             </summary>
             <param name="basePath">Base path.</param>
             <param name="version">Version.</param>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.CreateCache(System.String,System.String)">
             <summary>
             Creates new cache default instance.
             </summary>
             <returns>The cache.</returns>
             <param name="cacheName">Cache name.</param>
             <param name="version">Version.</param>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.AddToSavingQueueIfNotExists(System.String,System.Byte[],System.TimeSpan)">
             <summary>
             Adds the file to cache and file saving queue if it does not exists.
             </summary>
             <param name="key">Key to store/retrieve the file.</param>
             <param name="bytes">File data in bytes.</param>
             <param name="duration">Specifies how long an item should remain in the cache.</param>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.RemoveAsync(System.String)">
             <summary>
             Removes the specified cache entry.
             </summary>
             <param name="key">Key.</param>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.ClearAsync">
             <summary>
             Clears all cache entries.
             </summary>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.ExistsAsync(System.String)">
             <summary>
             Checks if cache entry exists/
             </summary>
             <returns>The async.</returns>
             <param name="key">Key.</param>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.TryGetAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Tries to get cached file as byte array.
             </summary>
             <returns>The get async.</returns>
             <param name="key">Key.</param>
             <param name="token">Token.</param>
            </member>
        <member name="M:FFImageLoading.Cache.DiskCache.TryGetStreamAsync(System.String)">
             <summary>
             Tries to get cached file as stream.
             </summary>
             <returns>The get stream.</returns>
             <param name="key">Key.</param>
            </member>
        <member name="P:FFImageLoading.ImageService.Config">
             <summary>
             Gets FFImageLoading configuration
             </summary>
             <value>The configuration used by FFImageLoading.</value>
            </member>
        <member name="M:FFImageLoading.ImageService.Initialize(FFImageLoading.Config.Configuration)">
             <summary>
             Initializes FFImageLoading with given Configuration. It allows to configure and override most of it.
             </summary>
             <param name="configuration">Configuration.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.LoadFile(System.String)">
             <summary>
             Constructs a new TaskParameter to load an image from a file.
             </summary>
             <returns>The new TaskParameter.</returns>
             <param name="filepath">Path to the file.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.LoadUrl(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Constructs a new TaskParameter to load an image from a URL.
             </summary>
             <returns>The new TaskParameter.</returns>
             <param name="url">URL to the file</param>
             <param name="cacheDuration">How long the file will be cached on disk</param>
            </member>
        <member name="M:FFImageLoading.ImageService.LoadFileFromApplicationBundle(System.String)">
             <summary>
             Constructs a new TaskParameter to load an image from a file from application bundle.
             </summary>
             <returns>The new TaskParameter.</returns>
             <param name="filepath">Path to the file.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.LoadCompiledResource(System.String)">
             <summary>
             Constructs a new TaskParameter to load an image from a compiled drawable resource.
             </summary>
             <returns>The new TaskParameter.</returns>
             <param name="resourceName">Name of the resource in drawable folder without extension</param>
            </member>
        <member name="M:FFImageLoading.ImageService.LoadStream(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}})">
             <summary>
             Constructs a new TaskParameter to load an image from a Stream.
             </summary>
             <returns>The new TaskParameter.</returns>
             <param name="resourceName">A function that allows a CancellationToken and returns the Stream to use. This function will be invoked by LoadStream().</param>
            </member>
        <member name="P:FFImageLoading.ImageService.ExitTasksEarly">
             <summary>
             Gets a value indicating whether ImageService will exit tasks earlier
             </summary>
             <value><c>true</c> if it should exit tasks early; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:FFImageLoading.ImageService.SetExitTasksEarly(System.Boolean)">
             <summary>
             Sets a value indicating whether ImageService will exit tasks earlier
             </summary>
             <param name="exitTasksEarly">If set to <c>true</c> exit tasks early.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.SetPauseWork(System.Boolean)">
             <summary>
             Sets a value indicating if all loading work should be paused (silently canceled).
             </summary>
             <param name="pauseWork">If set to <c>true</c> pause/cancel work.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.CancelWorkFor(FFImageLoading.Work.IImageLoaderTask)">
             <summary>
             Cancel any loading work for the given ImageView
             </summary>
             <param name="task">Image loading task to cancel.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.RemovePendingTask(FFImageLoading.Work.IImageLoaderTask)">
             <summary>
             Removes a pending image loading task from the work queue.
             </summary>
             <param name="task">Image loading task to remove.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
             <summary>
             Queue an image loading task.
             </summary>
             <param name="task">Image loading task.</param>
            </member>
        <member name="M:FFImageLoading.ImageService.InvalidateCacheAsync(FFImageLoading.Cache.CacheType)">
             <summary>
             Invalidates selected caches.
             </summary>
             <returns>An awaitable task.</returns>
             <param name="cacheType">Memory cache, Disk cache or both</param>
            </member>
        <member name="M:FFImageLoading.ImageService.InvalidateMemoryCache">
             <summary>
             Invalidates the memory cache.
             </summary>
            </member>
        <member name="M:FFImageLoading.ImageService.InvalidateDiskCacheAsync">
             <summary>
             Invalidates the disk cache.
             </summary>
            </member>
        <member name="M:FFImageLoading.ImageService.InvalidateCacheEntryAsync(System.String,FFImageLoading.Cache.CacheType,System.Boolean)">
             <summary>
             Invalidates the cache for given key.
             </summary>
             <returns>The async.</returns>
             <param name="key">Concerns images with this key.</param>
             <param name="cacheType">Memory cache, Disk cache or both</param>
             <param name="removeSimilar">If similar keys should be removed, ie: typically keys with extra transformations</param>
            </member>
        <member name="P:FFImageLoading.Work.ImageLoaderTaskBase.Parameters">
             <summary>
             Gets the parameters used to retrieve the image.
             </summary>
             <value>The parameters to retrieve the image.</value>
            </member>
        <member name="P:FFImageLoading.Work.ImageLoaderTaskBase.Completed">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:FFImageLoading.Work.ImageLoaderTaskBase" /> is completed.
             </summary>
             <value><c>true</c> if completed; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.GetKey(System.String)">
             <summary>
             Gets the cache key for this image loading task.
             </summary>
             <value>The cache key.</value>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.CanUseMemoryCache(System.String)">
             <summary>
             Indicates if memory cache should be used for the request
             </summary>
             <returns><c>true</c>, if memory cache should be used, <c>false</c> otherwise.</returns>
             <param name="path">Path.</param>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.PrepareAndTryLoadingFromCacheAsync">
             <summary>
             Prepares the instance before it runs.
             </summary>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.CancelIfNeeded">
             <summary>
             Cancel current task only if needed
             </summary>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.TryLoadingFromCacheAsync">
             <summary>
             Tries to load requested image from the cache asynchronously.
             </summary>
             <returns>A boolean indicating if image was loaded from cache.</returns>
            </member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.LoadFromStreamAsync(System.IO.Stream)">
             <summary>
             Loads the image from given stream asynchronously.
             </summary>
             <returns>An awaitable task.</returns>
             <param name="stream">The stream to get data from.</param>
            </member>
        <member name="T:FFImageLoading.Cache.SimpleDiskCache">
             <summary>
             Disk cache iOS/Android implementation.
             </summary>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FFImageLoading.Cache.SimpleDiskCache" /> class.
             </summary>
             <param name="cachePath">Cache path.</param>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.CreateCache(System.String)">
             <summary>
             Creates new cache default instance.
             </summary>
             <returns>The cache.</returns>
             <param name="cacheName">Cache name.</param>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.AddToSavingQueueIfNotExists(System.String,System.Byte[],System.TimeSpan)">
             <summary>
             Adds the file to cache and file saving queue if it does not exists.
             </summary>
             <param name="key">Key to store/retrieve the file.</param>
             <param name="bytes">File data in bytes.</param>
             <param name="duration">Specifies how long an item should remain in the cache.</param>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.RemoveAsync(System.String)">
             <summary>
             Removes the specified cache entry.
             </summary>
             <param name="key">Key.</param>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ClearAsync">
             <summary>
             Clears all cache entries.
             </summary>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ExistsAsync(System.String)">
             <summary>
             Checks if cache entry exists/
             </summary>
             <returns>The async.</returns>
             <param name="key">Key.</param>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.TryGetAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Tries to get cached file as byte array.
             </summary>
             <returns>The get async.</returns>
             <param name="key">Key.</param>
             <param name="token">Token.</param>
            </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.TryGetStreamAsync(System.String)">
             <summary>
             Tries to get cached file as stream.
             </summary>
             <returns>The get stream.</returns>
             <param name="key">Key.</param>
            </member>
    </members>
</doc>
